{"version":3,"sources":["../../src/controllers/course.js"],"names":["createCourse","getAllCourse","getSingleCourse","deleteCourse","req","res","course","Course","_id","mongoose","Types","ObjectId","title","body","description","save","then","newCourse","status","json","success","message","catch","error","console","log","find","select","allCourse","err","id","params","courseId","findById","singleCourse","findByIdAndRemove","exec"],"mappings":";;;;;QAGgBA,Y,GAAAA,Y;QA6BAC,Y,GAAAA,Y;QAoBAC,e,GAAAA,e;QAoBAC,Y,GAAAA,Y;;AAxEhB;;;;AACA;;;;;;AAEO,SAASH,YAAT,CAAsBI,GAAtB,EAA2BC,GAA3B,EAAgC;;AAGnC,QAAMC,SAAS,IAAIC,gBAAJ,CAAW;AACtBC,aAAKC,mBAASC,KAAT,CAAeC,QAAf,EADiB;AAEtBC,eAAOR,IAAIS,IAAJ,CAASD,KAFM;AAGtBE,qBAAaV,IAAIS,IAAJ,CAASC;AAHA,KAAX,CAAf;;AAMA,WAAOR,OACFS,IADE,GAEFC,IAFE,CAEG,UAACC,SAAD,EAAe;AACjB,eAAOZ,IAAIa,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBC,qBAAS,IADe;AAExBC,qBAAS,gCAFe;AAGxBd,oBAAQU;AAHgB,SAArB,CAAP;AAKH,KARE,EASFK,KATE,CASI,UAACC,KAAD,EAAW;AACdC,gBAAQC,GAAR,CAAYF,KAAZ;AACAlB,YAAIa,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACjBC,qBAAS,KADQ;AAEjBC,qBAAS,iCAFQ;AAGjBE,mBAAOA,MAAMF;AAHI,SAArB;AAKH,KAhBE,CAAP;AAiBH;;AAED;AACO,SAASpB,YAAT,CAAsBG,GAAtB,EAA2BC,GAA3B,EAAgC;AACnCE,qBAAOmB,IAAP,GACKC,MADL,CACY,uBADZ,EAEKX,IAFL,CAEU,UAACY,SAAD,EAAe;AACjB,eAAOvB,IAAIa,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBC,qBAAS,IADe;AAExBC,qBAAS,sBAFe;AAGxBd,oBAAQqB;AAHgB,SAArB,CAAP;AAKH,KARL,EASKN,KATL,CASW,UAACO,GAAD,EAAS;AACZxB,YAAIa,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACjBC,qBAAS,KADQ;AAEjBC,qBAAS,iCAFQ;AAGjBE,mBAAOM,IAAIR;AAHM,SAArB;AAKH,KAfL;AAgBH;;AAED;AACO,SAASnB,eAAT,CAAyBE,GAAzB,EAA8BC,GAA9B,EAAmC;AACtC,QAAMyB,KAAK1B,IAAI2B,MAAJ,CAAWC,QAAtB;AACAzB,qBAAO0B,QAAP,CAAgBH,EAAhB,EACKd,IADL,CACU,UAACkB,YAAD,EAAkB;AACpB7B,YAAIa,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACjBC,qBAAS,IADQ;AAEjBC,kCAAoBa,aAAatB,KAFhB;AAGjBL,oBAAQ2B;AAHS,SAArB;AAKH,KAPL,EAQKZ,KARL,CAQW,UAACO,GAAD,EAAS;AACZxB,YAAIa,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACjBC,qBAAS,KADQ;AAEjBC,qBAAS,4BAFQ;AAGjBE,mBAAOM,IAAIR;AAHM,SAArB;AAKH,KAdL;AAeH;;AAED;AACO,SAASlB,YAAT,CAAsBC,GAAtB,EAA2BC,GAA3B,EAAgC;AACnC,QAAMyB,KAAK1B,IAAI2B,MAAJ,CAAWC,QAAtB;AACAzB,qBAAO4B,iBAAP,CAAyBL,EAAzB,EACKM,IADL,GAEKpB,IAFL,CAEU;AAAA,eAAMX,IAAIa,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC7BC,qBAAS;AADoB,SAArB,CAAN;AAAA,KAFV,EAKKE,KALL,CAKW,UAACO,GAAD;AAAA,eAASxB,IAAIa,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACjCC,qBAAS;AADwB,SAArB,CAAT;AAAA,KALX;AAQH","file":"course.js","sourcesContent":["import mongoose from 'mongoose';\r\nimport Course from '../models/course';\r\n\r\nexport function createCourse(req, res) {\r\n\r\n\r\n    const course = new Course({\r\n        _id: mongoose.Types.ObjectId(),\r\n        title: req.body.title,\r\n        description: req.body.description,\r\n    });\r\n\r\n    return course\r\n        .save()\r\n        .then((newCourse) => {\r\n            return res.status(201).json({\r\n                success: true,\r\n                message: 'New cause created successfully',\r\n                Course: newCourse,\r\n            });\r\n        })\r\n        .catch((error) => {\r\n            console.log(error);\r\n            res.status(500).json({\r\n                success: false,\r\n                message: 'Server error. Please try again.',\r\n                error: error.message,\r\n            });\r\n        });\r\n}\r\n\r\n// Get all course\r\nexport function getAllCourse(req, res) {\r\n    Course.find()\r\n        .select('_id title description')\r\n        .then((allCourse) => {\r\n            return res.status(200).json({\r\n                success: true,\r\n                message: 'A list of all course',\r\n                Course: allCourse,\r\n            });\r\n        })\r\n        .catch((err) => {\r\n            res.status(500).json({\r\n                success: false,\r\n                message: 'Server error. Please try again.',\r\n                error: err.message,\r\n            });\r\n        });\r\n}\r\n\r\n// get single course\r\nexport function getSingleCourse(req, res) {\r\n    const id = req.params.courseId;\r\n    Course.findById(id)\r\n        .then((singleCourse) => {\r\n            res.status(200).json({\r\n                success: true,\r\n                message: `More on ${singleCourse.title}`,\r\n                Course: singleCourse,\r\n            });\r\n        })\r\n        .catch((err) => {\r\n            res.status(500).json({\r\n                success: false,\r\n                message: 'This course does not exist',\r\n                error: err.message,\r\n            });\r\n        });\r\n}\r\n\r\n// delete a course\r\nexport function deleteCourse(req, res) {\r\n    const id = req.params.courseId;\r\n    Course.findByIdAndRemove(id)\r\n        .exec()\r\n        .then(() => res.status(204).json({\r\n            success: true,\r\n        }))\r\n        .catch((err) => res.status(500).json({\r\n            success: false,\r\n        }));\r\n}"]}